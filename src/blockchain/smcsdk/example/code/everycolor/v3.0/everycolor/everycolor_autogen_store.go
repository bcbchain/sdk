package everycolor

import (
	"blockchain/smcsdk/sdk/bn"
	"blockchain/smcsdk/sdk/types"
	"fmt"
)

// This file is auto generated by BCB-goland-plugin.
// Don't modified it

// betInfo map[string]map[string]*BetInfo
//@:public:store

func (e *Everycolor) _betInfo(k0 string, k1 string) *BetInfo {
	return e.sdk.Helper().StateHelper().GetEx(fmt.Sprintf("/betInfo/%v/%v", k0, k1), &BetInfo{}).(*BetInfo)
}
func (e *Everycolor) _setBetInfo(k0 string, k1 string, v *BetInfo) {
	e.sdk.Helper().StateHelper().Set(fmt.Sprintf("/betInfo/%v/%v", k0, k1), &v)
}
func (e *Everycolor) _chkBetInfo(k0 string, k1 string) bool {
	return e.sdk.Helper().StateHelper().Check(fmt.Sprintf("/betInfo/%v/%v", k0, k1))
}

// lockedAmount map[string]bn.Number
//@:public:store

func (e *Everycolor) _lockedAmount(k0 string) bn.Number {
	temp := bn.N(0)
	return *e.sdk.Helper().StateHelper().GetEx(fmt.Sprintf("/lockedAmount/%v", k0), &temp).(*bn.Number)
}
func (e *Everycolor) _setLockedAmount(k0 string, v bn.Number) {
	e.sdk.Helper().StateHelper().Set(fmt.Sprintf("/lockedAmount/%v", k0), &v)
}
func (e *Everycolor) _chkLockedAmount(k0 string) bool {
	return e.sdk.Helper().StateHelper().Check(fmt.Sprintf("/lockedAmount/%v", k0))
}

// mapSetting *MapSetting
//@:public:store

func (e *Everycolor) _mapSetting() *MapSetting {
	return e.sdk.Helper().StateHelper().GetEx("/mapSetting", &MapSetting{}).(*MapSetting)
}
func (e *Everycolor) _setMapSetting(v *MapSetting) {
	e.sdk.Helper().StateHelper().Set("/mapSetting", v)
}
func (e *Everycolor) _chkMapSetting() bool {
	return e.sdk.Helper().StateHelper().Check("/mapSetting")
}

// roundInfo map[string]*RoundInfo
//@:public:store

func (e *Everycolor) _roundInfo(k0 string) *RoundInfo {
	return e.sdk.Helper().StateHelper().GetEx(fmt.Sprintf("/roundInfo/%v", k0), &RoundInfo{}).(*RoundInfo)
}
func (e *Everycolor) _setRoundInfo(k0 string, v *RoundInfo) {
	e.sdk.Helper().StateHelper().Set(fmt.Sprintf("/roundInfo/%v", k0), v)
}
func (e *Everycolor) _chkRoundInfo(k0 string) bool {
	return e.sdk.Helper().StateHelper().Check(fmt.Sprintf("/roundInfo/%v", k0))
}

// playerIndex map[string]map[string]*PlayerIndexes
//@:public:store

func (e *Everycolor) _playerIndex(k0 string, k1 string) *PlayerIndexes {
	return e.sdk.Helper().StateHelper().GetEx(fmt.Sprintf("/playerIndex/%v/%v", k0, k1), &PlayerIndexes{}).(*PlayerIndexes)
}
func (e *Everycolor) _setPlayerIndex(k0 string, k1 string, v *PlayerIndexes) {
	e.sdk.Helper().StateHelper().Set(fmt.Sprintf("/playerIndex/%v/%v", k0, k1), &v)
}
func (e *Everycolor) _chkPlayerIndex(k0 string, k1 string) bool {
	return e.sdk.Helper().StateHelper().Check(fmt.Sprintf("/playerIndex/%v/%v", k0, k1))
}

// secretSigner types.PubKey
//@:public:store:cache

func (e *Everycolor) _secretSigner() types.PubKey {
	return *e.sdk.Helper().StateHelper().McGetEx("/secretSigner", new(types.PubKey)).(*types.PubKey)
}
func (e *Everycolor) _setSecretSigner(v types.PubKey) {
	e.sdk.Helper().StateHelper().McSet("/secretSigner", &v)
}
func (e *Everycolor) _clrSecretSigner() {
	e.sdk.Helper().StateHelper().McClear("/secretSigner")
}
func (e *Everycolor) _chkSecretSigner() bool {
	return e.sdk.Helper().StateHelper().Check("/secretSigner")
}

// recvFeeInfos RecvFeeInfo
//@:public:store:cache

func (e *Everycolor) _recvFeeInfos() RecvFeeInfo {
	return *e.sdk.Helper().StateHelper().McGetEx("/recvFeeInfos", &RecvFeeInfo{}).(*RecvFeeInfo)
}
func (e *Everycolor) _setRecvFeeInfos(v RecvFeeInfo) {
	e.sdk.Helper().StateHelper().McSet("/recvFeeInfos", &v)
}
func (e *Everycolor) _clrRecvFeeInfos() {
	e.sdk.Helper().StateHelper().McClear("/recvFeeInfos")
}
func (e *Everycolor) _chkRecvFeeInfos() bool {
	return e.sdk.Helper().StateHelper().Check("/recvFeeInfos")
}
